@model EquipmentManagementSystem.Domain.Data.EquipmentViewModel

@using EquipmentManagementSystem

@using EquipmentManagementSystem.Data
@inject Localizer Localizer

@{
    ViewData["Title"] = Localizer["Create"] + " " + Localizer["Equipment"];
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

@section scripts {

    <script type="text/javascript">

        $('document').ready(function () {

            $('#Equipment_OwnerName').autocomplete({

                source: '@Url.Action("AutoComplete", "Chromebook")'
            });

            var nameInput = document.getElementById('Equipment_OwnerName');

            var bool = document.getElementById('Equipment_IDCheck');
            bool.value = nameInput.value.trim() ? true : false;

            var ownerID = document.getElementById("Owner_ID");
            ownerID.value = -1;
        });


        $('#typeSelect').change(function (event) {

            var row = document.getElementById('AdditionalInformation');
            $('#AdditionalInformation').empty();

            var td = document.createElement('td');
            var td2 = document.createElement('td');

            var p = document.createElement('p');
            var input = document.createElement('input');

            p.classList = "CategoryText Bold";
            input.classList = "CategoryText";

            switch (this[this.value].innerHTML) {

                case "Mobil":

                    input.type = "text";
                    input.id = "MobileNumber";
                    p.appendChild(document.createTextNode("@Localizer["MobileNumber"]"));
                    input.textContent = "@Html.DisplayFor(model => model.Equipment.MobileNumber)";
                    break;

                case "Skrivare":

                    input.type = "text";
                    input.id = "IP";
                    p.appendChild(document.createTextNode("@Localizer["IP"]"));
                    input.textContent = "@Html.DisplayFor(model => model.Equipment.IP)";
                    break;

                case "Router":
                case "Switch":

                    input.type = "number";
                    input.id = "Ports";
                    p.appendChild(document.createTextNode("@Localizer["Ports"]"));
                    input.value = "@Html.DisplayFor(model => model.Equipment.MobileNumber)";
                    break;

                case "Projektor":

                    input.type = "text";
                    input.id = "Resolution";
                    p.appendChild(document.createTextNode("@Localizer["Resolution"]"));
                    input.value = "@Html.DisplayFor(model => model.Equipment.MobileNumber)";
                    break;

                default:
                    return;
            }

            td.appendChild(p);
            td2.appendChild(input);

            row.appendChild(td);
            row.appendChild(td2);
        });

        $('#Owner_FullName').keyup(function () {

            var nameInput = document.getElementById('Equipment_OwnerName');

            Search(nameInput, document.getElementById('ownerList'));

            var bool = document.getElementById('Equipment_IDCheck');
            bool.value = nameInput.value.trim() ? true : false;
        });

        $('document').click(function () {

            var list = document.getElementById("ownerList");
            list.style.display = "none";
        });

        function ClickName(event) {

            event.preventDefault();

            var input = document.getElementById("Equipment_OwnerName");
            input.value = event.target.textContent;

            var list = document.getElementById("ownerList");
            list.style.display = "none";

            var bool = document.getElementById('Equipment_IDCheck');
            bool.value = false;

            var ownerID = document.getElementById("Equipment_OwnerID");
            ownerID.value = event.target.id;
        };


        $('#form').on("submit", function (event) {

            if (event.keyCode!=13) {

            }
        });

        function callBackUser(data) {

            if (!data) {

                var phElement = $('#modal-placeholder');

                $.get("@Url.Action("CreateModal", "Owner", new { culture = ViewData["Language"] })").done(function (data2) {

                    phElement.html(data2);
                    phElement.find('.modal').modal('show');
                });

                var x = document.getElementById("modal-placeholder");
                x.style.display = "block";
            }
            else {

                window.location.href = "@Url.Action("Index", "Chromebook")";
            }

        };

        $("#Serial").keydown(function (e) { if (e.which == 13) e.preventDefault(); });

    </script>
}

    <h2>@Localizer["Create"]</h2>

@using (Html.BeginForm("Create", "Home", FormMethod.Post, new { id = "form", @class = "postAjax" })) {

    @Html.AntiForgeryToken()
    <h3></h3>
    <div>
        @Html.HiddenFor(model => model.Equipment.IDCheck)
        @Html.HiddenFor(model => model.Owner.ID)
        <table>
            <tr>
                <td><p class="CategoryText Bold">@Localizer["Model"]:  </p></td>
                <td><p class="CategoryText">@Html.EditorFor(model => model.Equipment.Model)</p></td>
            </tr>
            <tr>
                <td><p class="CategoryText Bold">@Localizer["Serial"]: </p></td>
                <td><p class="CategoryText">@Html.EditorFor(model => model.Equipment.Serial) @Html.ValidationMessage("Equipment.Serial", "", new { @class = "text-danger" })</p></td>
            </tr>
            <tr>
                <td><p class="CategoryText Bold">@Localizer["Location"]: </p></td>
                <td><p class="CategoryText">@Html.EditorFor(model => model.Equipment.Location)</p></td>
            </tr>
            <tr>
                <td><p class="CategoryText Bold">@Localizer["Owner"]: </p></td>
                <td>
                    <p class=" CategoryText">@Html.EditorFor(model => model.Equipment.OwnerName)</p>
                    <input type="button" onclick="RequestCreateOwnerModal()" value="Create new Owner" />
                    <div class="ModalForm" id="modal-placeholder"></div>
                </td>

            </tr>
            <tr>
                <td><p class="CategoryText Bold">@Localizer["Notes"]: </p></td>
                <td>@Html.TextAreaFor(model => model.Equipment.Notes, new { @class = "NotesField" })</td>
            </tr>
            <tr>
                <td><p class="CategoryText Bold">@Localizer["EquipType"]</p></td>
                <td><select asp-for="Equipment.EquipType" id="typeSelect" asp-items="Html.GetEnumSelectList<EquipmentManagementSystem.Models.Equipment.EquipmentType>()"></select></td>
            </tr>
            <tr id="AdditionalInformation"></tr>
        </table>
    </div>
    <div id="additionalInformation"></div>
    <div class="SubmitDiv">
        <input type="submit" value="@Localizer["Create"]" id="test" />
        <input type="button" value="@Localizer["Back"]" onclick="location.href='@Url.Action("Index", new { culture = ViewData["Language"] })'" />
    </div>
}


