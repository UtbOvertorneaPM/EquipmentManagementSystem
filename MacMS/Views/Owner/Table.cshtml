@using EquipmentManagementSystem.Domain.Data
@using EquipmentManagementSystem.Domain.Data.Models
@using EquipmentManagementSystem.Domain.Service
@model PagedList<Owner>
@inject Localizer Localizer

@{
    Layout = "~/Views/Shared/_OwnerTableLayout.cshtml";
}


@section Scripts {


    <script type="text/javascript">


        $('document').ready(function () {

            ReloadTable();
        });

        function PostTable(uri, searchString, currentSort) {

            var tableView = "@Html.Raw(Url.Action("Table", "Owner", new { sortVariable = "_Sort_", searchString = "_Search_", page = "_Page_" }))"
                .replace("_Sort_", encodeURIComponent(currentSort))
                .replace("_Search_", encodeURIComponent(searchString))
                .replace("_Page_", encodeURIComponent(uri));

            $.get(tableView,
                function (data) {
                    var partial = document.getElementById('partialTable');
                    partial.innerHTML = data;
                    ReloadTable(@Model.TotalPages);
                }
            )
        };


        function ReloadTable() {

            var curPage = document.getElementById("CurPage").textContent;

            var count = @Model.TotalPages;
            var lastPos = @Model.TotalPages - 1;

            $('a.sortLink').click(function (e) {

                e.preventDefault();
                Sort(e.target.id.toString());
            });

            var posList = [0, lastPos];
            var startList = document.getElementById('startList');
            var endList = document.getElementById('endList');
            var curList = document.getElementById('curList');

            startList.innerHTML = '';
            endList.innerHTML = '';
            curList.innerHTML = '';

            for (var i = (curPage - 2); i < (curPage + 3); i++) {

                if (i < 1) {
                    i++;
                }
                if (i > 0 && i < lastPos) {
                    posList.push(i);
                }
            }

            for (var i = 0; i < posList.length; i++) {

                var a = document.createElement('a');
                a.appendChild(document.createTextNode(posList[i]));

                a.classList = posList[i] == curPage ? "CurPage" : "PageLink";

                a.href = "javascript:PageClick(_Obj_)"
                    .replace("_Obj_", a.textContent);


                if (i == 0 && posList[i] != curPage) {

                    startList.appendChild(a);
                }
                else if (i == 1) {

                    endList.appendChild(a);
                }
                else {

                    if (posList[i] == curPage) {
                        var text = document.createTextNode(posList[i]);
                        curList.appendChild(text);
                    }
                    else {
                        curList.appendChild(a);
                    }
                }

            }
        };


        function PageClick(page) {

            PostTable(page, "@ViewData["SearchString"]", "@ViewData["CurrentSort"]");
        };

        function Sort(value) {

            let curSort = document.getElementById("CurrentSort").textContent;
            let searchString = document.getElementById("SearchString").textContent;

            switch (value) {

                case "Created":

                    sortVariable = curSort == "Created_desc" ? "Created" : "Created_desc";
                    PostTable("@ViewData["Page"]", searchString, sortVariable.toString());
                    break;

                case "Date":

                    sortVariable = curSort == "Date_desc" ? "Date" : "Date_desc";
                    PostTable("@ViewData["Page"]", searchString, sortVariable.toString());
                    break;

                case "Owner":

                    sortVariable = curSort == "Owner_desc" ? "Owner" : "Owner_desc";
                    PostTable("@ViewData["Page"]", searchString, sortVariable.toString());
                    break;

                default:

                    PostTable("0", "", "Date_desc");
                    break;
            }

        };

        $("#selectionDelete").click( function (event) {

            var table = document.getElementById("deleteTable");
            var rowItems = $(".SelectedRow");

            for (var i = 0; i < rowItems.length; i++) {

                var createdDate = rowItems[i].cells[0].innerHTML;
                var fName = rowItems[i].cells[2].innerHTML;
                var lName = rowItems[i].cells[3].innerHTML;
                var mail = rowItems[i].cells[4].innerHTML;

                var row = document.createElement("tr");
                var cell = document.createElement("td");

                cell.innerHTML = createdDate;
                row.append(cell);
                cell = document.createElement("td");
                cell.innerHTML = fName;
                row.append(cell);
                cell = document.createElement("td");
                cell.innerHTML = lName;
                row.append(cell);
                cell = document.createElement("td");
                cell.innerHTML = mail;
                row.append(cell);

                table.appendChild(row);
            }

            $.getScript("/js/ConfirmationDialogue.js", function () {
                ConfirmClickGeneric(Delete, '#deleteDialog', 900);
            });

        });


        function Delete() {

            var rows = document.getElementById("deleteTable");
            var mail = Array();

            for (var i = 0, row; row = rows.rows[i]; i++) {

                mail[i] = row.cells[3].innerHTML;
            }

            $.post("@Url.Action("DeleteSelection", "Owner", new { mail = "_mail_" })"
                .replace("_mail_", encodeURIComponent(mail)), function (response) {

                    switch (response) {
                        case true:

                            window.location.href = "@Url.Action("Index")";
                            break;
                        case null:

                            alert("Deletion failed, check that the user has a valid E-mail address");
                            break;
                        default:
                    }
                });
        };

        $("#selectionExport").click(function () {

            $.getScript("/js/ConfirmationDialogue.js", function () {
                ConfirmClickGeneric(Export, '#exportDialog');
            });
        });


    </script>
}

@if (@Model.TotalPages > 1) {

    <p>Displaying: @Model.PageEntries - @Model.PageEnd of @Model.TotalEntries entries</p>
    <p id="CurPage" hidden>@Model.Page</p>
    <p id="CurrentSort" hidden>@ViewData["CurrentSort"].ToString()</p>
    <p id="SearchString" hidden>@ViewData["SearchString"].ToString()</p>
    <div style="float:left" id="pageList">
        <div style="float:left" id="startList"></div>
        <div style="float:left" id="curList"></div>
        <div style="float:left" id="endList"></div>
    </div>
}

<table class="ownerTable NoPaddingMargin" id="table">
    <thead>
        <tr id="pageListRow"></tr>
        <tr id="selectionRow">
            <th id="selectionButtons" style="display:none">
                Selection
                <input type="button" id="selectionDelete" value="Delete" />
                <input type="button" id="selectionExport" value="Export" />
            </th>

        </tr>
        <tr>
            <th>
                <a href="" class="sortLink" id="Created">
                    @Localizer["Created Date"]
                </a>
            </th>
            <th>
                <a href="" class="sortLink" id="Date">
                    @Localizer["Last Edited"]
                </a>
            </th>
            <th>
                @Localizer["FirstName"]
            </th>
            <th>
                @Localizer["LastName"]
            </th>
            <th>
                @Localizer["Mail"]
            </th>
            <th>
                @Localizer["Address"]
            </th>
            <th class="Actions">
            </th>
        </tr>
    </thead>
    @foreach (var item in Model) {
        <tr id="toprow" class="ParentRow">
            <td>
                @Html.DisplayFor(modelItem => item.Added)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastEdited)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Mail)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td class="Actions">
                @Html.ActionLink(Localizer["Edit"], "Edit", new { id = item.ID, culture = ViewData["Language"] }) |
                @Html.ActionLink(Localizer["Delete"], "Delete", new { id = item.ID, culture = ViewData["Language"] })
            </td>
        </tr>
    }
</table>